/*
 * This file is part of c-mqtt-forwarder
 *
 * Copyright (C) 2020 by Andreas Maus <maus@ypbind.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
#ifndef __C_MQTT_FORWARDER_CONFIG_H__
#define __C_MQTT_FORWARDER_CONFIG_H__

#define C_MQTT_FORWARDER_NAME "c-mqtt-forwarder"
#define C_MQTT_FORWARDER_VERSION "@C_MQTT_FORWARDER_VERSION@"
#define DEFAULT_CONFIGURATION_FILE "/etc/mqtt-forwarder/config.json"

#define DEFAULT_MQTT_PORT 1883
#define DEFAULT_MQTT_TIMEOUT 60
#define DEFAULT_MQTT_KEEPALIVE 15
#define DEFAULT_MQTT_RECONNECT_DELAY 5
#define DEFAULT_CA_DIR "/etc/ssl/certs"

#define DEBUG_BUILD @DEBUG_BUILD@
#if DEBUG_BUILD == 1
#define DEBUG
#else
#undef DEBUG
#endif /* DEBUG_BUILD == 1 */

#cmakedefine HAVE_MEMSET
#cmakedefine HAVE_CALLOC
#cmakedefine HAVE_STDBOOL_H
#cmakedefine HAVE_SIGACTION

#define BE_VERBOSE 0x01
#define BE_QUIET 0x02
#define DIRECTION_IN 0x04
#define DIRECTION_OUT 0x08

#define MQTT_SSL_VERIFY_NONE 0
#define MQTT_SSL_VERIFY_PEER 1

#define SIGNAL_HANDLER_EXIT 0xaa

#ifdef HAVE_STDBOOL_H
#include <stdbool.h>
#else /* HAVE_STDBOOL_H */
typedef char bool;
#define true 1
#define false 0
#endif /* HAVE_STDBOOL_H */

#include <mosquitto.h>
#include <uthash.h>
#include <pthread.h>
#include <time.h>
#include <setjmp.h>
#include "log/log.h"

#ifdef DEBUG

#define LOG_DEBUG(...) log_log(LOG_DEBUG, __FILE__, __LINE__, __VA_ARGS__);
#define LOG_INFO(...) log_log(LOG_INFO, __FILE__, __LINE__, __VA_ARGS__);
#define LOG_WARN(...) log_log(LOG_WARN, __FILE__, __LINE__, __VA_ARGS__);
#define LOG_ERROR(...) log_log(LOG_ERROR, __FILE__, __LINE__, __VA_ARGS__);
#define LOG_FATAL(...) log_log(LOG_FATAL, __FILE__, __LINE__, __VA_ARGS__);

#else

#define LOG_DEBUG(...) log_log(LOG_DEBUG, NULL, -1, __VA_ARGS__);
#define LOG_INFO(...) log_log(LOG_INFO, NULL, -1, __VA_ARGS__);
#define LOG_WARN(...) log_log(LOG_WARN, NULL, -1, __VA_ARGS__);
#define LOG_ERROR(...) log_log(LOG_ERROR, NULL, -1, __VA_ARGS__);
#define LOG_FATAL(...) log_log(LOG_FATAL, NULL, -1, __VA_ARGS__);

#endif /* DEBUG */

struct message {
    char *topic;
    int datalen;
    void *data;
    // required for utlist
    struct message *prev;
    struct message *next;
};

struct mqtt_configuration {
    char *host;
    int port;
    char *user;
    char *password;
    char *ssl_auth_public;
    char *ssl_auth_private;
    char *ca_file;
    char *ca_dir;
    bool insecure_ssl;
    short qos;
    char *topic;
    int timeout;
    int keepalive;
    short direction;
    int reconnect_delay;
    bool use_tls;

    struct mosquitto *handle;

    // provide a pointer to the upper configuration
    struct configuration *config;

    // pending messages
    struct message *message_queue;

    // required for utlist
    struct mqtt_configuration *prev;
    struct mqtt_configuration *next;
};

struct configuration {
    short loglevel;
    unsigned int count_in;
    unsigned int count_out;
    struct mqtt_configuration *fan_in;
    struct mqtt_configuration *fan_out;
};

// mutex to avoid clutter when logging
static pthread_mutex_t log_mutex = PTHREAD_MUTEX_INITIALIZER;
// mutex for processing message queue
static pthread_mutex_t msg_mutex = PTHREAD_MUTEX_INITIALIZER;
// mutex for processing fan_in/fan_out list
static pthread_mutex_t fan_mutex = PTHREAD_MUTEX_INITIALIZER;

static jmp_buf state;

#endif
